freerun asm is ori.b #0, D0

bad ideas:
	letting the MMU handle illegal accesses to low 128K of memory - MMU has to sit between processor and memory
	remove pullup on AS - there to prevent spurious memory acceses once bus master is done and CPU has not relinquished control of the bus yet
	having the bootloader print stuff without host initiating communication - bootloader will hang waiting on tx buffer to drain if no host is there? Is this true?
	supervisor access only to EEPROM - prevents user from using hardware libs, initial supervisor -> user jump is awkward at best
	having MFP drive IRQ lines directly - if a priority level 2 interrupt and level 1 interrupt fire at the same time, the processor will register a leve 3 interrupt.

ideas for add-on boards:
	
	NOTE: all add-on boards have to have space for a board to be stacked on top of them, PC104 style
	MMU board ONLY is allowed to have two ports so more RAM or hardware can be put on top of it and managed.
	
	Debug card
		all the blinkenlights
		7-seg displays?
	Graphics (on a screen)
		FPGA used as graphics card
	Expansion card
		DIP holes for prototyping
	RAM expansions
		keep everything DIP, has to be >1MB to be helpful
		throw a MMU on this thing as well.
	Timer / interrupt controller
		use the 68k chip I already have
	SD support
		using IO pins on MFP
	User board
		could literally just be some switches and (buffered) LEDs
		switches can be pulled high or low, so a read to unimplemented memory can read in values (drive DTACK high until done)
	
what everything does:
	eeprom-config: python tool for writing and reading data to/from EEPROMs
	split: splits a binary file in two
	upload: application code upload to 68k baseboard + uart board

MANIFESTO:
	Fast.  Or at least faster than most other 68000 boards out there.
	Modern (interface).  If something needs to be connected, do it with modern parts.
	Extensible.  The board should contain enough to get started, but not enough that it hinders expansion.
	
	68000 / 68010 compatible
	Aim for 16MHz clock speed
	actual C compiler should be working for this, not BASIC or Forth or anything.  If not C, then only ASM

	new stuff:
		FIFO chips
		dual port RAM chips
		terminal color support - not that hard!
	
