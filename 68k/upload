#!/usr/bin/env python3
import argparse
import sys

if __name__ == "__main__":
	""" uploads code to the 68k board, which may or may not go into the EEPROMs.  Self-updating is not currently supported.
	
	This depends heavily on the construction of the bootloader, so this is a work in progress until the bootloader for the device itself is done.
	
	"""
	parser = argparse.ArgumentParser(description='Python script to upload code to a 68k board with a UART attached.')
	parser.add_argument('--version', action='version', version='Code upload tool v0.1')
	parser.add_argument('-d', '--device', type=str, help='UART device path')
	parser.add_argument('-b', '--binary', type=str, help='binary path')
	parser.add_argument('-s', '--speed', type=int, help='baud rate to communicate at')

	args = parser.parse_args()

	try:
		import serial
	except ModuleNotFoundError:
		print("pyserial module not found!")
		sys.exit(1)
	
	try:
		if args.device == None:
			raise IOError
		with open(args.device) as file:
			pass
	except IOError as bad_file:
		print("cannot open device file!")
		sys.exit(2)
	
	print("Opening serial port with 8N1 " + args.speed + " baud settings...")
	serport = serial.Serial(args.device, args.speed, timeout=5)

	try:
		with open(args.binary, "rb") as binfile:
			bindata = binfile.read()
	except IOError:
		print("binary cannot be opened!")
		sys.exit(3)
	
	serport.write(str(len(bindata)))
	serport.write(bindata)
	
	# TODO: read the data back out to verify it
	
	print("done.")

