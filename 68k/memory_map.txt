0x00000 -> 0x1FFFF: EEPROM
	0x0 -> 0x400: EVT
	0x400 -> 0x1FFFF: Bootloader and lib code - write-protected as this sets up the MMU.
0x20000 -> 0x3FFFF: "common" SRAM - accessible to all programs. don't put secure stuff here.
	0x20000 -> 0x200FF: MFP interrupt space
		0x20000 -> 0x20003F: UART buffer (32 bytes long)
	0x20100 -> 0x20300: ISR code space
0x40000 -> 0x400??: MFP

EEPROM booloader code starts at 0x400, application code starts at 0x1000.

still need to do housekeeping such as zeroing out .bss section because no OS will do it for us
cannot load anything into SRAM at assemble time, all has to be done by bootloader.

calling convention:
	everything is callee-saved except for a0, a1, d0, and d1
	pass everything on the stack as a long, eliminates alignment issues and we have the space for it
