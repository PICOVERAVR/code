#include <stdio.h>
#include "proc.h"
#include "execute.h"
#include "dispatch.h" // used to test r0 writes, since individual functions don't
			 // handle it

#suite fives-check

proc *p;

enum registers {
	R0,
	R1,
	R2,
	R3,
	R4,
	R5,
	R6,
};

void proc_set_vec(proc *p) {
	for (int i = 0; i < 32; i++) {
		p->regfile[i] = i;
	}
	
	p->i.f_s0 = R1;
	p->i.f_s1 = R2;
	p->i.f_d = R3;
}

// lots of identical code here, should really clean this up
// no isolation argument because check already does that

// lots of repetetive code here but honestly I'm tired of figuring out test case forking
// not freeing memory here because I don't care

#tcase cntl

#test nop
	proc *p = calloc(1, sizeof(proc)); // important to make sure no stray bytes are different
    proc_set_vec(p);

	proc *p2 = malloc(sizeof(proc));
    proc_set_vec(p2);
	
	int code = instr_nop(p2);

	ck_assert_int_eq(code, RET_OK);
	ck_assert_int_eq(memcmp(p2, p, sizeof(p)), 0); // make sure it did nothing

#test stop
	proc *p = malloc(sizeof(proc));
    proc_set_vec(p);	
	
	int code = instr_stop(p);
	ck_assert_int_eq(code, RET_STOP);

#tcase add_instr

#test add_basic1
	proc *p = malloc(sizeof(proc));
	proc_set_vec(p);
	
	p->i.f_d = R3;
	
	instr_add(p);
	
	ck_assert_int_eq(p->regfile[R3], 3);

#test add_basic2
	proc *p = malloc(sizeof(proc));
	proc_set_vec(p);
	
	p->regfile[R1] = 44;
	p->regfile[R2] = 32;

	instr_add(p);
	
	ck_assert_int_eq(p->regfile[R3], 76);
	
	free(p);
	
#test add_byte
	proc *p = malloc(sizeof(proc));
	proc_set_vec(p);
	
	p->regfile[R1] = 0x00FF;
	p->regfile[R2] = 0x00A4;
	
	instr_add(p);
	ck_assert_int_eq(p->regfile[R3], 0xA3);

#test add_immediate
	proc *p = malloc(sizeof(proc));
	proc_set_vec(p);

	p->i.f_pm = 0b100;
	p->i.f2_s = R1;
	p->i.f2_short_imm = 20;

	instr_add(p);
	ck_assert_int_eq(p->regfile[R3], 21);

#test add_word
	proc *p = malloc(sizeof(proc));
	proc_set_vec(p);

	p->i.f_pm = 0b010;
	p->regfile[R1] = 0xFFA0;
	p->regfile[R2] = 45;

	instr_add(p);
	
	ck_assert_int_eq(p->regfile[R3], 0xFFCD);

#test add_dest_r0
	proc *p = malloc(sizeof(proc));
	proc_set_vec(p);
	
	p->i.f_d = R0;
	p->i.f_opcode = ADD;

	int err = disp(p, NULL); // not executing an instruction that needs RAM,
							 // so no RAM is provided
	
	ck_assert_int_eq(p->regfile[R0], 0); // check for non-zero R0
	ck_assert_int_eq(err, 0); // no error should be reported for R0 write

#test add_check_byte
	proc *p = malloc(sizeof(proc));
	proc_set_vec(p);
	
	// check if the data in byte_regfile matches regfile
	p->regfile[R1] = 0xAAFF;
	
	ck_assert_int_eq(p->byte_regfile[R1*2], 0xFF);
	ck_assert_int_eq(p->byte_regfile[(R1*2)+1], 0xAA);

#test add_signed
	proc *p = malloc(sizeof(proc));
	proc_set_vec(p);
	
	p->regfile[R1] = -1;
	p->regfile[R2] = 10;
	
	instr_add(p);
	
	ck_assert_int_eq(p->regfile[R3], 9);

#tcase mul_instr

#test mul_basic1
	proc *p = malloc(sizeof(proc));
	proc_set_vec(p);
	
	p->i.g_s0 = R6;
	p->i.g_s1 = R6;
	
	p->i.g_l = R3;
	p->i.g_h = R4;
	
	instr_mul(p);
	
	ck_assert_int_eq(p->regfile[R3], 36);
