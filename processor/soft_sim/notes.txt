to do:
	write simulator in C
		have some way of verifying that the output is correct!
		nothing low level, just identify instructions we want/need and encoding
		a great chance to use new features of c that I wouldn't touch!
	? write assembler in yacc/bison (normally would create backend for gcc)
	write low-level simulator in C
		include microarchitecture this time
		start with something that works properly, then play around with optimizations
	write verilog code
		interface to actual FPGA
		learn Xilinx-specific IP and use it (block memory, etc.)
		simulate it
	upload to actual FPGA
		should work after all this testing... hopefully
		write support verilog (UART, memory, etc.)
	
	THEN
		name it: Fives - named after Clone Wars character and the fact that it's somewhat similar to RISC-V
		add doc - use doxygen
		show people
		put in showcase


notes:
	sim should have been written in C++, hungry for overloading.
		honestly, i'm hungry for something with an eval() statement.
		the sim would be slow, but a lot cleaner.

bugs:
	if an instruction returns an illegal opcode, it gets ignored
		unless it handles it manually like DIV

	an ADD instruction with a destination of R0 will overwrite R0
		there needs to be an explicit check for this, since it'll corrupt whatever's
		there or maybe something else if R0 is a constant stored somewhere else


things to add:
	seperate floating point support
	
