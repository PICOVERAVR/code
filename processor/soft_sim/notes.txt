to do:
	write simulator in C
		have some way of verifying that the output is correct!
		nothing low level, just identify instructions we want/need and encoding
		a great chance to use new features of c that I wouldn't touch!
	? write assembler in yacc/bison (normally would create backend for gcc)
	write low-level simulator in C
		include microarchitecture this time
		start with something that works properly, then play around with optimizations
	write verilog code
		interface to actual FPGA
		learn Xilinx-specific IP and use it (block memory, etc.)
		simulate it
	upload to actual FPGA
		should work after all this testing... hopefully
		write support verilog (UART, memory, etc.)
	
	THEN
		name it: Fives - named after Clone Wars character and the fact that it's somewhat similar to RISC-V
		add more doc - use doxygen
		show people
		put in showcase

notes:
	sim should have been written in C++, hungry for overloading.
		honestly, i'm hungry for something with an eval() statement.
		the sim would be slow, but a lot cleaner.

to check/finish:
	shift instructions
	store
	check for clearing upper byte when modifying low byte
		also set upper byte to known value in tests when working with lower byte
	usage of "s" and "d" inconsistant between proc.h and isa.txt, fix

bugs:
	none that I know of!


things to add eventually:
	seperate floating point support
	IEEE-754 compliant!
