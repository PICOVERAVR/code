ISA
=======

16 bit RISC processor

//give a reason as to how this is different than RISC-V.

32 16-bit registers (R0 - R31)
	R31: PC - hardwired
	R30: SP
	R29: BP
	R0:  0x0 - hardwired

seperate external processor status register
 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
| x  x  x  x  x  x  x  x  x  x  x  c  c  c  r  i |

i = interrupt enable
r = processor reset
ccc = interrupt/trap cause

seperate external processor feature register
 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
| x  x  x  x  x  x  x  x  x  x  x  x  x  x  m  f |

f = floating point support
m = hardware MUL/DIV support


traps
	0x0: reset
	0x4: illegal instruction
	0x8: misaligned PC, SP, BP
	0xB: intvec 0
	...  intvec 7

Three operand format for everything
register-register architecture

no status register, just compare and branch

"s" indicates implemented in soft_sim

control
	HALT			stop the processor	s
	//not specified whether this is a seperate bus or just extra pin
	IO			r	       -> out	s
				in	       -> r	s
	PS			proc_state     -> r	s
	
math
	ADD s0, s1, d	s0 + s1 (signed 16b)   -> d	s
	ADDU s0, s1, d	s0 + s1 (unsigned 16b) -> d	s
	ADDB s0, s1, d	s0 + s1 (signed 8b)    -> d	s
	ADDUB s0, s1, d s0 + s1 (unsigned 8b)  -> d	s
	
	SUB s0, s1, d	s0 - s1 (signed 16b)   -> d	s
	SUBU s0, s1, d	s0 - s1 (unsigned 16b) -> d	s
	SUBB s0, s1, d	s0 - s1 (signed 8b)    -> d	s
	SUBUB s0, s1, d s0 - s1 (unsigned 8b)  -> d	s

	MUL s0, s1, h, L	s0 * s1 (signed 32b)    -> {h, L}	s
	MULU s0, s1, h, L	s0 * s1 (unsigned 32b)  -> {h, L}	s
	MULB s0, s1, d		s0 * s1 (signed 16b)    -> d		s
	MULUB s0, s1, d 	s0 * s1 (unsigned 16b)  -> d		s
	
	//d0 = res, d1 = rem
	DIV s0, s1, h, l	s0 / s1 (32bs)   -> {d0, d1} 		s
	DIVU s0, s1, h, l	s0 / s1 (32bu) -> {d0, d1}		s
	DIVB s0, s1, h, l	s0 / s1 (16bs)   -> {d0, d1}		s
	DIVUB s0, s1, h, l	s0 / s1 (16bu) -> {d0, d1}		s
	
	SEX s			8b sign(s) -> 16b sign(d)	s
	
	// inc and dec functionality provided by ADD r, 1, r
	
	AND s0, s1, d	s0 & s1 (signed 16b)   -> d	s
	ANDU s0, s1, d	s0 & s1 (unsigned 16b) -> d	s
	ANDB s0, s1, d  s0 & s1 (signed 8b)    -> d	s
	ANDUB s0, s1, d s0 & s1 (unsigned 8b)  -> d	s
	
	OR s0, s1, d	s0 | s1 (signed 16b)   -> d	s
	ORU s0, s1, d	s0 | s1 (unsigned 16b) -> d	s
	ORB s0, s1, d   s0 | s1 (signed 8b)    -> d	s
	ORUB s0, s1, d  s0 | s1 (unsigned 8b)  -> d	s

	XOR s0, s1, d	s0 ^ s1 (signed 16b)   -> d	s
	XORU s0, s1, d	s0 ^ s1 (unsigned 16b) -> d	s
	XORB s0, s1, d  s0 ^ s1 (signed 8b)    -> d	s
	XORUB s0, s1, d s0 ^ s1 (unsigned 8b)  -> d	s

	NOT s		~s		       -> d	s
	INV s		twos_comp(s)	       -> d	s
	
moving
	MOV s, d	s (16b)		-> d		s
	MOVB s, d	s (8b)		-> d		s
	
	//no LDB or STB, aligns stuff on 2-byte boundary
	LD addr, r	mem[addr]	-> r 		s
	LD i, r		mem[i]		-> r		s
	LD imm, r	imm		-> r		s
	
	ST r, addr	r		-> addr		s
	ST r, i		r		-> mem[i]
	ST r, imm	r		-> mem[imm]
	
branching
	BN lit		lit		-> pc		s
	
	BS r, add	s0 + s1		-> pc		s
	//branch to r = BS r, R0

	BR r		pc + r		-> pc		s
	//r treated as 16bu
	
	Bcc s, d, r	(s op d)?	-> r		s
	Bcc s, d, imm12 (s op d)?	-> imm12	s
	
	//no literal jumping like this
	BE s, d, r	(s == d)?	-> r 		s
	BNE s, d, r	(s != d)?	-> r		s
	
	BGT s, d, r	(s > d)?	-> r		s
	BGE s, d, r	(s >= d)?	-> r		s

	BLT s, d, r	(s < d)?	-> r		s
	BLE s, d, r	(s <= d)?	-> r		s
	
	BZ s, r		(s == 0)?	-> r		s
	BNZ s, r	(s != 0)?	-> r		s

instruction encoding

31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx| pm  |    op    |  -> HALT (A)
|xxxxxxxxxxxxxxxx|                        imm                      | pm  |    op    |  -> BN imm (B)
|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx|      s      | pm  |    op    |  -> INC r (C)
|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx|      s       |      d      | pm  |    op    |  -> MOV s, d (D)
|x|                   imm                            |      r      | pm  |    op    |  -> LD imm, r (E)
|xxxxxxxxxxxxxxxxxxxxxx|      s0      |      s1      |      d      | pm  |    op    |  -> ADD s0, s1, d (F)
|                     imm             |      s       |      d      | pm  |    op    |  -> ADD imm16, s, d (F2)
|xxxxxxx|      s0      |      s1      |      h       |      l      | pm  |    op    |  -> MUL s0, s1, h, L (G)


possible instructions to add
	IRET vs RET // would make a difference if we saved out registers!
	
opcode encoding
	all 0 opcode is illegal (STOP pseudo-i in this sim)
	 9 8 7 6 5 4 3 2 1 0
	  |x x h|  NOP(1)  | h = 1 for halt
	  |i b s|  ADD(x)  | b = 1 for word, s = 1 for signed, i = 1 for 12bu imm, 0 for reg
	  |x b x|  MOV(x)  | b = 1 for word
	  |x x m|  LD(x)   | m = 1 for mem, 0 for imm
	  |x x x|  ST(x)   | 
	  |x x x|  BN(x)   |
	  |x x r|  BR(x)   | r = 1 for +r //has to be seperate from BN due to differing encoding
	  |c c c|  Bcc(x)  | c = condition code
	  |x x i|  IO(x)   | i = 1 for input

interrupt architecture:
	jump to proper vector
	no saving of registers, extra instructions
	undefined behavior for executing unused interrupt vector

	does a hardware-initiated CALL instruction to vector
	RET returns to normal code

stack:
	starts wherever
	grows down



